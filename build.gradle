apply plugin: 'idea'

buildscript {
    repositories {
        mavenLocal()
    }

    dependencies {
        classpath 'at.dinauer.reporting:dependency-reporting-plugin:0.1-SNAPSHOT'
    }
}

apply plugin: 'dependency-reporting'

def dependencyReportDir = "$buildDir/report/dependencies"

task createDependencyGraph(type: CreateDependencyGraph) {
	dependencyGatherer = new MavenDependencyGatherer(rootPomFile: new File(rootDirOfProjectToSearch + '/pom.xml'), dependencyRegex: dependencyRegex, projectRegex: projectRegex)
	translator = new DependencyToDotLanguageTranslator()
	fileCreator = new GraphvizDotfileCreator()
	regex = dependencyRegex

	graphDotFile = file("$dependencyReportDir/dependencies.gv")

	outputs.upToDateWhen { false }
}

task copyDependencyReportLibraries(type: Copy) {
	from "src/main/lib"
	into dependencyReportDir
}

class CreateDependencyGraph extends DefaultTask {
	DependencyGatherer dependencyGatherer
	DependencyToDotLanguageTranslator translator
	GraphvizDotfileCreator fileCreator
	String regex

	@OutputFile
	File graphDotFile

	@TaskAction
	void createDotfile() {
		def dependenciesGroupedByModule = dependencyGatherer.gatherDependencies()

		def graphEntries = translator.translateDependenciesToDotLanguage(dependenciesGroupedByModule, regex)

		fileCreator.createDirectedGraphFile(graphDotFile, graphEntries)
	}
}

interface DependencyGatherer {
	Map<String, Set<String>> gatherDependencies()
}

class MavenDependencyGatherer implements DependencyGatherer {
	File rootPomFile
	String dependencyRegex
	String projectRegex

	Map<String, Set<String>> gatherDependencies() {
		new MavenMultiModulePomParser().parseMatchingDependencies(rootPomFile, dependencyRegex, projectRegex)
	}
}